10-2-1-edros-node.txt - Side track on edison gpio config options
                        & Kangaroo motion controller how to's
================================================================

Since we have to run python progams that integ w libmraa w sudo
EX: $ sudo 7-4-pyserial.py

When we integ this into edision.py node start it with sudo:
REF: http://answers.ros.org/question/165246/launch-node-with-root-permissions/

$ sudo rosrun edros edison.py
                \       \___ node name
                 \__________ pkg  name


OR, we have to write a little program to cfg edison gpio pins for /dev/ttyMFD1
    using libmraa and run it using sudo in the ros launch file

OR, we can write a bash script to cfg edison gpio's pins to use /dev/ttyMFD1
    serial port using sysfs i/f and run that via ros launch file

http://evolutek.org/howto-activate-arduino-serial-on-intel-edison.html

----------------------- cfgttyMFD1.sh --------------------------------------
#!/bin/sh

# Ref:
# http://evolutek.org/howto-activate-arduino-serial-on-intel-edison.html

# export all useful gpio
echo 130 > /sys/class/gpio/export
echo 248 > /sys/class/gpio/export
echo 216 > /sys/class/gpio/export
echo 131 > /sys/class/gpio/export
echo 249 > /sys/class/gpio/export
echo 217 > /sys/class/gpio/export
echo 214 > /sys/class/gpio/export

# Disable tri-stat
echo low > /sys/class/gpio/gpio214/direction

# Set direction
echo low  > /sys/class/gpio/gpio248/direction
echo high > /sys/class/gpio/gpio249/direction

echo in > /sys/class/gpio/gpio216/direction
echo in > /sys/class/gpio/gpio217/direction

# Set Mode1
echo mode1 > /sys/kernel/debug/gpio_debug/gpio130/current_pinmux
echo mode1 > /sys/kernel/debug/gpio_debug/gpio131/current_pinmux

# Activate tri-state
echo high > /sys/class/gpio/gpio214/direction

-----------------------------------------------------------------------
See if

cfgttyMFD1.sh              < this configures gpio mux to enable /dev/ttyMFLD1.sh
                             Q1: will it run as normal user?
+

7-4a-pyserial.py  works    < thus eliminating having to screw with libmraa in the python code

-----------------------------------------
1. scp cfgttyMFD1.sh to edison and chmod +x

iqdean@ubilinux:~/motors$ ls -al
-rwxr-xr-x  1 iqdean iqdean 1290 Dec 27  2015 7-4a-edpyserial.py
-rwxr-xr-x  1 iqdean iqdean 1265 Dec  5  2015 7-4-edpyserial.py
-rwxr-xr-x  1 iqdean iqdean  831 Jan  1 00:15 cfgttyMFD1.sh

iqdean@ubilinux:~/motors$ ./cfgttyMFD1.sh     <--- won't run without sudo
./cfgttyMFD1.sh: 7: ./cfgttyMFD1.sh: cannot create /sys/class/gpio/export: Permission denied
./cfgttyMFD1.sh: 8: ./cfgttyMFD1.sh: cannot create /sys/class/gpio/export: Permission denied
./cfgttyMFD1.sh: 9: ./cfgttyMFD1.sh: cannot create /sys/class/gpio/export: Permission denied
...

iqdean@ubilinux:~/motors$ sudo ./cfgttyMFD1.sh 	<-- runs fine with sudo
[sudo] password for iqdean:
iqdean@ubilinux:~/motors$

2. now see if 7-4a-edpyserial.py works

iqdean@ubilinux:~/motors$ ls -al /dev/ttyM*
crw-rw---T 1 root dialout 4, 128 Jan  1 00:00 /dev/ttyMFD0
crw-rw---T 1 root dialout 4, 129 Jan  1 00:00 /dev/ttyMFD1
crw-rw---- 1 root tty     4, 130 Jan  1 00:00 /dev/ttyMFD2

iqdean@ubilinux:~/motors$ python 7-4a-edpyserial.py
Opening Uart(0): /dev/ttyMFD1
Enter your commands below.
Insert "exit" to leave the application.
00:20:59>> d,start
00:21:08>> t,start
00:21:11>> d,s0
00:21:15>> t,s0
00:21:18>> d, getp
00:21:20>> D,P0

00:21:20>> t, getp
00:21:25>> T,P0

3. now see if the d, siX  & d, si-X works     < incremental speed increase

00:26:41>> d, s0

00:28:16>> d, s128
00:31:41>> d, gets
00:31:53>> D,S147     <- due to x4 encoder resolution and slop in the chain
                         connecting the wheel to encoder the feedback isn't very accurate

00:31:53>> d, si128
00:32:05>> d, gets
00:32:10>> D,S274     <- d, si128 works

00:32:10>> d, si-128
00:32:17>> d, gets
00:32:20>> D,S123	<- d, si-128 works

00:32:20>> d, si-128
00:32:33>> d, gets
00:32:49>> D,S-24	<- but due to sloppy encoder linkages, the feedback isn't precise
                       so instead of being 0, it's -24 and now the wheels are moving backwards
						instead of full stop
00:32:49>> d, s0	<- till you give it command to stop with the s0

---- so, it seems control is better if you just issue absolute speed commands instead of incremental speed commands

00:47:20>> d, gets
00:47:25>> D,S0

00:47:25>> d, s-128
00:47:36>> d, s-256
00:47:48>> d, s-512
00:47:57>> d, getp
00:48:02>> D,P175999

00:48:02>> d, s-256
00:48:12>> d, s-128
00:48:21>> d, s0
00:48:24>> d, getp
00:48:28>> D,P168432

00:48:28>> t, s256
00:48:38>> t, getp
00:48:44>> T,P1954

00:48:44>> t, s0
00:48:48>> d, getp
00:48:56>> D,P168432

00:48:56>> t, s-256
00:49:21>> t, s0
00:49:28>> t, getp
00:49:32>> T,P1328

00:49:32>> t, s-256
00:49:44>> t, getp
00:49:48>> T,P491

00:49:48>> t, s0
00:49:51>> t, getp
00:49:53>> T,P-237

00:49:53>> d, start
00:53:26>> d, start
00:53:28>> t, start
00:53:32>> t, start
00:53:34>> d, getp
00:53:42>> D,P0

00:53:42>> t, getp
00:53:48>> T,P0

==== calibrate motion controller based on robot geometry =====

2.1 Robot Parameters
---------------------------
wheel_dia     :	  9.75" = .247m
track_width   :  18.00" = .4572m

Encoder**	  :

256 raw counts / rev
x 4 mech gearing
---> 1024  raw counts/ wheel rev @ encoder
       |   quad decode  <- ?? note sure how kangaroo mc decodes ???
	     |	  x1  = 1024  lines/rev  \
		   \__	x2  = 2048  lines/rev   > we can get some idea by rotating the wheel
			      x4  = 4096  lines/rev  /  1 rev and doing getp

try to rotate the exactly 1 rev and read position

or

since kangx2 support position control, tell it to move 1 Rev & see where it ends up

assume x1 quad decode on kang, 1024 lines/rev
so, a stop condition

d, s0
d, getp
d, pi1024s128      < move 1024 lines of incremental position at speed 128 lines/sec
d, getp            < use getp to see where we endup

Get position. Returns the channel number,
followed by a comma, followed by a capital P
if the move is completed or a lowercase p if
the move is still going on, followed by the
position in units (plain text) followed by a
return and a newline

=== see if above works ====
iqdean@ubilinux:~/motors$ sudo ./cfgttyMFD1.sh
[sudo] password for iqdean:
iqdean@ubilinux:~/motors$ python 7-4a-edpyserial.py
Opening Uart(0): /dev/ttyMFD1
Enter your commands below.
Insert "exit" to leave the application.
00:02:49>> d, start
00:02:53>> t, start
00:02:57>> d, s0
00:03:40>> t, s0
00:03:46>> d, getp
00:03:53>> D,P0

00:03:53>> t, getp
00:03:58>> T,P0

00:03:58>> d, pi1024s128
00:05:29>> d, getp
00:06:10>> D,P1024		<--- 1024 lines/wheel rev

00:06:10>> t, getp
00:06:17>> T,P2

---- now we have all the parameters needed to setup units
     on the kangaroo so we can operate in m/s and rad/sec:

http://www.dimensionengineering.com/info/encoders
Mode:		Mixed
Wheel Dia:	248 mm
Track Width:	458 mm
Enc Res:	1024 lines	< 256 cpr * 4:1 gear ratio (4 enc : 1 wheel) = 1024 lines/wheel rev
Gear Ratio:	1:1 		< 1:1 cuz Enc Res is already 256*4 = 1024

Results in:

Exact
Drive
779.115 mm = 1024 lines
Turn
360 degrees = 1891.0968 lines

Rounded
Drive
779 mm = 1024 lines (0.01% error)
Turn
360 degrees = 1891 lines (-0.01% error)

Simplified Serial
D, UNITS 779 mm = 1024 lines
T, UNITS 360 degrees = 1891 lines

----

 ROS Navigation Stack
       \/
     CV,CAV          <- CV meters/sec      CAV radians/degree
       \/
   kCV = CV*1000     <- 1 m/s = 1000 mm/s
  kCAV = CAV*57.296  <- 1 rad/s = (180/pi) deg/sec = 57.296 deg/sec
       \/
  Base Controller
    d, s<kCV>
    t, s<kCAV>


=== update kangaroo init code to include units
    then repeat above experiment using real world units

=== experiment 2: kangaroo units command to operate using m/s and rad/sec

00:03:58>> d, pi1024s128    < Units are: 1024 lines  128 lines/sec
           d, pi779s250	    < 779mm       250 mm/sec
                               1Rev       .25  m/s

00:03:04>> d, start
00:03:10>> t, start
00:03:14>> d, units 779 mm = 1024 lines
00:03:58>> t, units 360 degrees = 1891 lines
00:04:15>> d, getp
00:04:26>> D,P0

00:04:26>> t, getp
00:04:31>> T,P0

00:19:53>> d, s0
00:19:57>> d, s1000	1000 mm/s = 1 m/s  < which is hauling = 3.2 ft/sec
00:20:23>> d, s500       500 mm/s = .5 m/s
00:20:28>> d, s250       250 mm/s = .25 m/s
00:20:33>> d, s125       125 mm/s = .125 m/s
00:20:42>> d, s0
00:20:54>> d, s-250
00:21:14>> d, s0
00:21:22>> d, getp
00:21:35>> D,P14943

00:21:35>> d, pi-779s250
00:21:58>> d, s0
00:22:02>> d, getp
00:22:06>> D,P14166     14943 - 14166 = 777 = ~1 Rev of wheel

00:22:06>> d, pi-779s200
00:26:50>> d, s0
00:26:58>> d, getp
00:27:13>> D,P13388	14166 - 13388 = 778 = ~1 Rev of wheel

00:27:13>> d, pi779s200
00:31:23>> d, s0
00:31:28>> d, getp
00:31:38>> D,P14168			14168 - 13388 = 780 = ~1 Rev of wheel

----------------- 0 - 1 m/s dynamic range should be fine for throttle ----
           d, s0
00:37:40>> d, s125    .125 m/s  <-- this is moving really slow
00:37:52>> d, s250    .250 m/s
00:38:00>> d, s500    .500 m/s
00:38:09>> d, s1000  1.0   m/s   <-- this is hauling ~3.28ft/sec
00:38:18>> d, s750
00:38:25>> d, s500
00:38:31>> d, s250
00:38:41>> d, s125
00:38:51>> d, s0

=== BKM Init ===
00:03:04>> d, start				'd, start/r/n'
00:03:10>> t, start				't, start/r/n'
00:03:14>> d, units 779 mm = 1024 lines         'd, units 779 mm = 1024 lines/r/n'
00:03:58>> t, units 360 degrees = 1891 lines	't, units 360 degrees = 1891 lines/r/n'

=== BKM ops ===      m/s 1000 mm/m
d, sXXX , where XXX = CV*1000			'd, sXXX/r/n'
